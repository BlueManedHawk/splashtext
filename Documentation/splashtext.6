.TH SPLASHTEXT "6, but also 7, 3, 5, and 1" 2022-11-04 "Splash Text" "Splash Text Manpage"
.SH NAME
splashtext \- a unified system for splash text, freely usable by any program
.SH SYNOPSIS
Either
.RS
.B #include "splashtext.h"

.B char ** splashtext(enum splashtext
.IB flags ","
.B ..., NULL);
.RE
or
.RS
.B splashtext (--help|--version|--list|[--sequences] [--nostdout] [--yesstderr] [--randnum] --context
.I context...
.B -- [--content
.I content...
.B -- ]
.IB files/directories... ")"
.RE
.SH DESCRIPTION
Splash Text is a unified system for splash text, freely usable by any program. It comes with both a command-line interface and a C subroutine interface, each of which has the same options available. The invocation of the system can be fine-tuned to the needs of the invoker.

Generally, to use the system, one must specify at least one file or directory from which to randomly
.B (not cryptographically securely)
grab a splash, and at least one context in which the resulting splash is intended to be used (see the next paragraph for how the contexts and restricted content selections are determined).  If an appropriate splash cannot be found, an empty string is output.  You can also specify which kinds of restricted content you're okay with; because you can specify directories, this means that you can do stuff like, say, only using the files with dark humor in them if the user of your program says they're okay with that.

You can specify your own splash files, or you can use the
.I list
flag to list the ones that come with the program and then specify those instead; see OPTIONS below for how this flag works.  The built-in splash files are guaranteed to not contain spoilers for any piece of media.

.SS Output
Splash Text will output a UTF-8 string, terminated with either a newline character (from the program) or a nul character (from the function).  The string will begin with a header, initiated by Start Of Heading (U+0001) and terminated by Start Of Text (U+0002), within which will be a character for the context (see OPTIONS below) or a ? character (see
.I randnum
in OPTIONS below), which may be preceeded by a sequence of restricted content characters followed by a period . character. The output string will never be more than a kibibyte long (including header and the terminating character).

If an appropriate splash cannot be found, an empty string (except for the terminating character) is output.  This empty string has no header.

.B Be prepared to deal with the output string as you would any other string.  Remember that Unicode allows for some pretty crazy shit to be done.  In addition, be prepared to deal with the case of failure where an empty string is output.

.SS Format of splash files
Splash text documents have filenames of the form
.IB "Unique Name" "." abc "." x ".splash.txt"
, where
.I Unique Name
is a unique name,
.I abc
are optional characters describing the restricted content found within the file (see OPTIONS below),
.I x
is a character describing the context in which the splashes make sense (see OPTIONS below), and
.B splash.txt
is the literal text "splash.txt".  This means that you can specify a directory with other kinds of files in it, and only the the splash text files will be read from.

Splash files have one splash per line, and use the Start Of String control character (U+0098) to start comments and String Terminator (U+009C) to end them; this works even across lines.  (String Terminator is also used by other applications in conjunction with the DCS, OSC, PM, and APC characters, and Splash Text will take this into account when parsing comments.)  Blank lines (including lines that are only part of a comment) are ignored.

.BR "Be warned that" " (at least in the presupplied files)" ", the restricted content filename letters only apply to the splashes within the file" ","
and not necessarily the comments within a file.
.B In particular, the comments of a file can contain restricted content that the splashes themselves do not!

Splash files can contain Select Graphical Rendition sequences (started with either Escape-[ [U+001B U+005B] or Control Sequence Introducer [U+009B]), but these will be stripped out unless the invoker of Splash Text specifies the
.I sequences
flag.  On the other hand, any substring of a splash that starts with PU1-SOS (U+0091 U+0098) and ends with ST (U+009C) will be stripped out unless the
.I sequences
flag was
.I not
specified.  This pair of functionalities can be used to specify how to render a piece of text when SGR sequences are not available (for example, surrounding a substring in underscores when it can't be italicized).

.SS Recomended practice
Those who use this program should output splash text in yellow, unless the splash text comes from an ominous file, in which case they should be output in red.  This can be detected from the information encoded in the header.  You are STRONGLY ENCOURAGED to use ominous splashes in some way or another.  Note that these colors are added automatically if you use the
.I sequences
flag.

Unique names should
.I never
be relied upon to determine the content of a file!  Only the content and context flags can be used for that.  If you want to be certain of the content of a particular file, you can checksum it or something like that, which Splash Text provides no tools for.
.SH OPTIONS
Throughout this section, the options given must be prefaced with "--" when used as options for the program, or "splashtext$" when used as flags for the function (or "splashtext_" if your compiler doesn't support dollars in identifiers).

Note that if you try to use short options, the program will print a special message and fail with exit code 1.
.IP help
Prints a help message instead and exits with code 1.
.B This option is not available for the function.
This overrides all other flags.
.IP version
Emits the version of the software preceeded by the letter "v".  This follows semantic versioning (see semver.org), so it should be pretty easy to parse.
.B This does not provide any guarantees about the contents of the presupplied splash files!
If you want to check those, you should use the
.I list
option and checksum the corresponding files (or something like that—in any case, Splash Text provides no tools to do this).
.IP
This overrides all other flags except
.IR help .
Note that the de-facto standard indicates that the
.I --version
option should exit with the code 1, so this program does that too.
.IP list
Lists the pathnames of the presupplied files.  This will be given as a newline-delimited list, with literal newlines in filenames preceded with the SUB character (U+001A) (and literal SUBs replaced with another SUB).  This overrides all other flags except
.I help
and
.IR version .
.IP sequences
Select Graphical Rendition sequences in splashes will not be stripped out.  In addition, splashes will automatically be made yellow (unless they're ominous, in which case they'll be made red).
.IP yesstderr
Also output to STDERR.
.B This option is not available for the function.
.IP nostdout
Don't output to STDOUT.
.B This option is not available for the function.
.IP randnum
Instead of a splash, the output string may instead contain a random number
.B "¡that is not cryptographically securely generated!"
that you can then use
.B atoll()
or something on to retrieve.  This is indicated by setting the context character in the flag to the ? character.  The number is in the range from 0 to
.B RAND_MAX
inclusive.
.IP context
.B This behaves differently from the other options.
.IP
Specify the contexts which you want to allow.  The following options are available; these are specified either as a space-separated and "--"-terminated list following the
.I --context
option on the command line, or by using the flags with the names below prepended with "splashtext$context$" (or "splashtext_context_" if your compiler doesn't support dollars in identifiers).  The letters in parentheses indicate the letter in the filename that indicates the context.
.RS
.RS
.PP
\- log (l) — Splashes that make sense as messages in a logfile.
.PP
\- crash (c) — Splashes that make sense as a witty comment in a crash report.
.PP
\- subtitle (s) — Splashes that make sense as the subtitle of something.
.PP
\- ominous (r) — Various ominous messages.
.PP
\- tips (t) — Helpful tips.  This isn't used by the presupplied splash files.
.PP
\- quote (q) — Quotes, all of which have attribution.
.PP
\- other (o) — Everything else.
.RE
.RE
.IP content
.B This behaves differently from the other options.
.IP
Specify the types of restricted content you're okay with seeing.  This option operates like the
.I context
flag, but with the term "content" used in the enumerators instead of "context".  The available options are:
.RS
.RS
.PP
\- sexual (x) — Sexual content.  In the presupplied splashes, this also includes cusses like the f-bomb or either c-word (but not cusses like shitstain or asssniffer); furthermore, breasts and butts are not considered
.I implicitly
sexual.
.PP
\- graphic (g) — Graphic content.
.PP
\- heavy (s) — Heavy content; in the presupplied splashes, this also includes anything religious.
.PP
\- humor (h) — Not actually being a type of restricted content, this instead combines with the others to indicate that the content inside a particular file is intended to be humorous.
.RE
.RE
.SH EXIT STATUS
Normally, the program will output a splash and exit with a 0.  When called with the
.IR --version " or " --help " or " --list
options, it will output the appropriate piece of text and exit with a 1.  If the program can't find a splash, it will output an empty (except for the terminating newline) string with no header and return a 2, and if something goes terribly wrong, it will return a 3 and nothing is guaranteed about the output.
.SH RETURN VALUE
Normally, the program will return a UTF-8 string (a
.BR "char *" )
that will be no longer than one kibibyte, including the terminating character and the header.  If the function can't find a splash, it will return an empty (except for the terminating nul) string with no header.  If the function is called with the
.I version
flag, the string will be a semantic version (see https://semver.org) prepended with the letter "v" (you will need to parse this yourself).  If the function is called with the
.I list
flag, it will return a string of newline-terminated substrings instead, each member of which will be a pathname for one of the presupplied files.
.SH CONFORMING TO
Splash Text seeks to be portable to any
.IR open " and " actively-maintained
systems.
.B Ports to obsolete or malicious systems will not be considered.
.SH AUTHORS
This project is currently being maintained by Blue-Maned_Hawk, with contributions accepted.  The project is available at https://github.com/BlueManedHawk/splashtext.
