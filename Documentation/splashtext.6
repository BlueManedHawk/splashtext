.TH SPLASHTEXT "6, but also 7, 3, 5, and 1" 2022-11-04 "Splash Text" "Splash Text Manpage"
.SH NAME
splashtext \- a unified system for splash text, freely usable by any program
.SH SYNOPSIS
.B #include """splashtext.h"""

.BI "char * splashtext(const struct splashtext$filestruct " files "[], size_t " len ", bool " sequences ", const uint_least16_t " length_restrictions "[2], enum splashtext$context " contexts ", enum splashtext$discomforter " discomforters ");"

.\" I have no idea if this is the correct way to manpage structs and enums.

.B struct splashtext$filestruct {
.RS
.BI "float " weight ;
.br
.BI "int " rnpf_len ;
.br
.BI "char * " filename ;
.RE
.B }

.B enum splashtext$context {
.I /* Flag enum */
.RS
.B splashtext$context$$log = …,
.br
.B splashtext$context$$crash = …,
.br
.B splashtext$context$$ominous = …,
.br
.B splashtext$context$$tips = …,
.br
.B splashtext$context$$quote = …,
.br
.B splashtext$context$$other = …
.br
.RE
.B }

.B enum splashtext$discomforter {
.I /* Flag enum */
.RS
.B splashtext$discomforter$$sexual = …,
.br
.B splashtext$discomforter$$graphic = …,
.br
.B splashtext$discomforter$$heavy = …,
.br
.B splashtext$discomforter$$humor = …
.RE
.B }
.SH DESCRIPTION
Splash Text is a unified system for splash text, freely usable by any program.  The invocation of the system can be fine-tuned to the needs of the invoker.  It comes with some presupplied splash files, but you can also supply your own.

Splash Text works by taking in an array of filenames and randomly (but in a way that is
.BR "not cryptographically secure!" )
selecting a splash from one of them.  The
.I .filename
member of an element of
.I files
is a pointer to a filename, and the
.I .weight
element is the weight you desire to give to that particular file (you can set this to zero for all files you supply if you don't care about this). You can also set
.I .filename
to be a null pointer, in which case Splash Text will pretend that it's a file where each of the splashes is a number from 0 to
.I .rnpf_len
(the returned string has information that allows you to tell whether the splash is a number from one of these pseudofiles).  The maximum value for
.I .rnpf_len
is
.BR RAND_MAX ,
and it can't be negative.
(The name
.I .rnpf_len
comes from the phrase
.BR "r" and "n" um "p" suedo "f" ile.)
The argument
.I len
specifies the length of the array; note that this is the
.B total occupied space
of the array, not the number of elements in the array, or in other words, it's
.IR "sizeof files" ,
not
.IR "sizeof files / sizeof files[0]" .

If your system is POSIX compliant and you didn't define the
.B SPLASHTEXT$NODIRS
macro when building, you can also set
.I .filename
to be the name of a directory, such as
.BR /usr/local/share/splashtext/ ,
which happens to be where the presupplied splash files are stored (assuming you installed Splash Text, that is); in this case, only the files that end in
.I .splash.txt
will be used to get splashes (so you can just specify a mixed assets directory and you'll be fine), and the weight given in
.I .weight
will be for the
.IR "entire directory" .
Directories are scanned for splash files recursively.

The
.I length_restrictions
argument specifies the minimum and maximum length of splash you want returned.  (This is in
.BR bytes ,
not characters!)  Note that this rejects any splash that violates these requirements instead of shortening or lengthening the splash.
.I contexts
is a bitmask specifying which of the contexts that splashes are designed for you're okay with the splash you recieve being (note that the returned string has information that allows you to tell which context the particular splash you recieved was intended for).  A splash will be selected if it matches
.I any
of these contexts.
.I discomforters
is a similar bitmask, except that a splash will
.B always
be rejected if it has a discomforter you didn't specify.
.B Please see NOTES below—the way you define these terms may differ from the way the presupplied splash files define them.
If you want certainty, use your own splash files.

Finally, the
.I sequences
argument specifies whether ECMA-48 SGR sequences may be included in splashes.  Not every splash has them, but if they do, and this flag is set to
.BR false ,
they will be stripped out (but in some cases replacements may be put in their place—see below the description of the Splash Text file format).
.SS The Splash File File Format
Splash files are plain UTF-8 text files.  Each line is a splash.  Blank lines and trailing whitespace are ignored.  Comments are started with U+0003 (i.e. End of TeXt) and go to the end of the line.  (Lines of only whitespace or only a comment or both are considered blank.)  A shebang directive at the start of the file is ignored.

The name of a splash file is of the format
.IB name . abc . x .splash.txt
, where
.I name
is a unique name (no restrictions except for whatever's imposed by your filesystem),
.I abc
is a potentially-empty set of letters indicating the discomforters in the file,
.I x
is a letter indicating the context in which the splashes in the file make sense, and
.B .splash.txt
is the literal text ".splash.txt".  The letters for the contexts are as follows:  l for log, c for crash, s for subtitle, r for ominous (see NOTES), t for tips, q for quote, and o for other; and the letters for the discomforters are as follows: x for sexual, g for graphic, s for heavy (see NOTES), and h for humor.  The "h" discomforter cannot appear alone.
.B Be warned that
(at least in the presupplied splash files)
.B the letters in the filenames that indicate discomforters apply only to the splashes—particularly, this means that the comments can contain discomforters that the splashes do not!

Splashes may contain ECMA-48 Select Graphical Rendition sequences (introduced with either escape-bracket or control sequence introducer), but these will be stripped out unless the invoker specifies
.B true
for the
.I sequences
argument or the escape-bracket/control sequence introducer is preceeded by a backslash.  If you want to include some text only when such sequences are unavailable (for example, to surround a piece of text in underscores only when it can't be italicized), begin that substring with U+0091 U+0098 and terminate it with U+009C.  For the opposite, replace U+0091 with U+0092.  Splash Text will detect when an entire splash is delimited like this and only select it when it wouldn't be an empty line.  A newline will be treated equivalently to a U+009C.

The backslash can preceed any character to have it be interpreted as a regular character instead of using whatever special effects the character might have,
.B unless
it's a newline.

Splash Text comes with a Vim syntax highlighting file that you can install if you want.
.SS Command-Line Wrapper Program
The command-line wrapper program has syntax as follows:
.RS
.BI "splashtext (--help|--version|[--sequences] [--minlen " num "] [--maxlen " num "] [--discomforters " str "...] --contexts " str "... -- (" "[weight] pathname" ")...)"
.RE
The weight is disambiguated from the pathname by preceeding it with a percent sign.  The numerical psuedofiles are encoded as a number preceeded by an octothorpe.  An actual filename beginning with a percent sign, octothorpe, or backslash must be prepended with a backslash.  The strings used for the discomforters and contexts options are the same as the corresponding enumerators, but with everything before and including the double dollar sign removed.  The program will return 1 if invoked with the help or version options (which override all other options), and will return 2 if a splash can't be found (in this case, it will also output nothing).  The splashes output by the program are terminated with a newline, not a nul.  The program does not support short options.
.SS Recommended Practice
Once you've gotten the splash text and are showing it to your user, you should render it in yellow, or in red if it's an ominous splash.  (These colors will automatically be added if you specify
.B true
for the
.I sequences
argument.)  If you can't do this for whatever reason, you should make it clear in some other way that it's just a silly bit of splash text that shouldn't be taken seriously.  You are
.B STRONGLY ENCOURAGED
to use ominous splashes in some way.

The only things that can be relied upon to give an indication of the content of a splash are the context and discomforter flags.  Nothing else should be relied upon—particularly not the filenames of the splash files.

If Splash Text can't find a splash for whatever reason, you should handle that case more creatively than just using a placeholder splash.
.SH RETURN VALUE
Splash Text will return a UTF-8 string allocated on the heap that must be freed after you're done with it.  This will be a splash text preceeded with a header that begins with U+0001 and is terminated with U+0002.  The contents of this header will be a period followed by the letter corresponding to the context of the splash (or a question mark if it's from a numerical psuedofile), possibly preceeded by letters corresponding to discomforters.  If a splash cannot be found (either because of contradictory requirements or the
.I seeking
took more than five seconds), NULL will be returned instead.
.B Be prepared to deal with the output string as you would an unsanitized string.
Remember that Unicode allows for some pretty crazy shit to be done.
.SH CONFORMING TO
I am happy to port Splash Text to any
.I open
and
.I actively maintained
systems.
.B However, ports to obsolete or malicious systems will not be considered.
.SH NOTES
Since trailing whitespace is ignored, you can put a zero-width non-breaking space (or ZWNBSP, or BOM, or byte order mark) at the start of your splash files.

This library requires that your compiler support the "dollars in identifiers" extension to C.  There is no reason not to support this, and here's why.  Because C has no namespacing facility, we must make due with psuedo-namespaces.  But how should these be separated from the…well,
.I identifier
part of the identifier?  We could use an underscore, but then we'd need something different to separate words within the identifier.  Camel case doesn't work because it prevents shortened names like strcat from working (it also looks very unprofessional)…and now we're kinda out of options.  It would be nice if we could keep underscores for the identifier part of identifiers, but use something else for the psuedonamespaces…and as it happens, modern C compilers have an extension to allow dollar signs in identifiers!  Perfect for what we're looking for!

The presupplied splash files will not contain any of the following types of content:
.RS
- Anything that is overly specific to a particular application
.br
- Content that is intended specifically to offend
.br
- Bizarrely-formed text that is liable to break things
.br
- Spoilers for any piece of media
.br
- Any content that is unethical (regardless of whether it breaks the law or not)
.RE
Besides this, no other guarantees are made about what may or may not appear in the presupplied splash files.  While you don't need to follow these guarantees in your own splash files (we have no way to check anyway), submissions for the presupplied splashes won't be accepted if they violate these.

Regarding discomforters in the presupplied splash files:  Cusses such as "shitstain" or "assface" are not considered to be any type of restricted content—everybody shits, everybody pisses, and everybody has an ass.  However, other cusses like the f-bomb or the c-word (either unit)
.I are
considered restricted content—in this case, sexual content.  Religious content, including religious cussing, is considered to be heavy content.  In some cases, these restrictions have lead to quotes being changed a little where it doesn't affect their meaning.

In the presupplied files, log splashes will generally end in an elipsis.  In the presupplied files, some subtitle splashes are "promotional" ones, such as "Now filled with more hot garbage!"—keep this in mind when deciding how to format them.  The presupplied splash files always give attribution in the quote splash files.  None of the presupplied splash files are of the "tips" type.

The "s" character for heavy content comes from the term
.RB \(oq s erious\(cq. \" How can this be made not stupid?
The "r" character for ominous splashes comes from the
.BR r ed
color they're supposed to be rendered in.  The inclusion of the content and context characters in the header of the returned splash allows for one to render splashes differently depending upon the context for which they're intended, and not just for the ominous ones.

The numerical psuedopaths and the corresponding character in splash headers provide an easy way for an invoker to use "special" splashes that wouldn't work in static text files, such as splashes that are dependent upon the time of day or the user's name.

I am aware that
.I splashtext
is kind of a large psuedo-namespace-esque prefix to use for this library.  But i'm not going to be the asshole who reserves a tiny prefix like `st` for something as small and silly as this.

.SH AUTHORS
This project is currently being maintained by Blue-Maned_Hawk.  The project is available at https://github.com/BlueManedHawk/splashtext.
